/**                                                                     
 *  /file WBFunctor_types_generated.h                                   
 *                                                                      
 *  Created by Carl Lusty in 2013.                                      
 *  Copyright (c) 2013 Carl Lusty                                       
 *  All rights reserved.                                                
 */                                                                     

#pragma clang diagnostic push                                           
#pragma clang diagnostic ignored "-Wpadded"                           
#pragma clang diagnostic ignored "-Wold-style-cast"                   

//Generated on: Wed Jan 20 00:03:35 2016
//Generated by user: nap

        
        /**
        * WBFunctor definition for Print_WBFunctor_T
        */
template <typename Print_WBFunctor_T >
class Print_WBFunctor: public WBFunctor<Print_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Print_WBFunctor_T
        */
        Print_WBFunctor(Print_WBFunctor_T* obj, void (Print_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<Print_WBFunctor_T >(obj, (void (Print_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Print_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::Print_t().get_from(m);
                Print_function_t funct((void (Print_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<Print_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Print_WBFunctor_T >::fObject->*funct)(WBFunctor<Print_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Print_WBFunctor_T::*Print_function_t) (guWhiteboard::WBTypes, std::string &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Print_WBFunctor_T *obj, void (Print_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new Print_WBFunctor<Print_WBFunctor_T >(obj, f, t); }
};



        
        /**
        * WBFunctor definition for Say_WBFunctor_T
        */
template <typename Say_WBFunctor_T >
class Say_WBFunctor: public WBFunctor<Say_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Say_WBFunctor_T
        */
        Say_WBFunctor(Say_WBFunctor_T* obj, void (Say_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<Say_WBFunctor_T >(obj, (void (Say_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Say_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::Say_t().get_from(m);
                Say_function_t funct((void (Say_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<Say_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Say_WBFunctor_T >::fObject->*funct)(WBFunctor<Say_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Say_WBFunctor_T::*Say_function_t) (guWhiteboard::WBTypes, std::string &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Say_WBFunctor_T *obj, void (Say_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new Say_WBFunctor<Say_WBFunctor_T >(obj, f, t); }
};



        
        /**
        * WBFunctor definition for Speech_WBFunctor_T
        */
template <typename Speech_WBFunctor_T >
class Speech_WBFunctor: public WBFunctor<Speech_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Speech_WBFunctor_T
        */
        Speech_WBFunctor(Speech_WBFunctor_T* obj, void (Speech_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<Speech_WBFunctor_T >(obj, (void (Speech_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Speech_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::Speech_t().get_from(m);
                Speech_function_t funct((void (Speech_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<Speech_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Speech_WBFunctor_T >::fObject->*funct)(WBFunctor<Speech_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Speech_WBFunctor_T::*Speech_function_t) (guWhiteboard::WBTypes, std::string &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Speech_WBFunctor_T *obj, void (Speech_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new Speech_WBFunctor<Speech_WBFunctor_T >(obj, f, t); }
};



        
        /**
        * WBFunctor definition for QSay_WBFunctor_T
        */
template <typename QSay_WBFunctor_T >
class QSay_WBFunctor: public WBFunctor<QSay_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for QSay_WBFunctor_T
        */
        QSay_WBFunctor(QSay_WBFunctor_T* obj, void (QSay_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<QSay_WBFunctor_T >(obj, (void (QSay_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class QSay_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::QSay_t().get_from(m);
                QSay_function_t funct((void (QSay_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<QSay_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<QSay_WBFunctor_T >::fObject->*funct)(WBFunctor<QSay_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (QSay_WBFunctor_T::*QSay_function_t) (guWhiteboard::WBTypes, std::string &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(QSay_WBFunctor_T *obj, void (QSay_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new QSay_WBFunctor<QSay_WBFunctor_T >(obj, f, t); }
};



        
        /**
        * WBFunctor definition for QSpeech_WBFunctor_T
        */
template <typename QSpeech_WBFunctor_T >
class QSpeech_WBFunctor: public WBFunctor<QSpeech_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for QSpeech_WBFunctor_T
        */
        QSpeech_WBFunctor(QSpeech_WBFunctor_T* obj, void (QSpeech_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t): WBFunctor<QSpeech_WBFunctor_T >(obj, (void (QSpeech_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class QSpeech_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                std::string result = guWhiteboard::QSpeech_t().get_from(m);
                QSpeech_function_t funct((void (QSpeech_WBFunctor_T::*)(guWhiteboard::WBTypes, std::string &))WBFunctor<QSpeech_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<QSpeech_WBFunctor_T >::fObject->*funct)(WBFunctor<QSpeech_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (QSpeech_WBFunctor_T::*QSpeech_function_t) (guWhiteboard::WBTypes, std::string &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(QSpeech_WBFunctor_T *obj, void (QSpeech_WBFunctor_T::*f)(guWhiteboard::WBTypes, std::string &), guWhiteboard::WBTypes t) { return new QSpeech_WBFunctor<QSpeech_WBFunctor_T >(obj, f, t); }
};



        
        /**
        * WBFunctor definition for SpeechOutput_WBFunctor_T
        */
template <typename SpeechOutput_WBFunctor_T >
class SpeechOutput_WBFunctor: public WBFunctor<SpeechOutput_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SpeechOutput_WBFunctor_T
        */
        SpeechOutput_WBFunctor(SpeechOutput_WBFunctor_T* obj, void (SpeechOutput_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t): WBFunctor<SpeechOutput_WBFunctor_T >(obj, (void (SpeechOutput_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SpeechOutput_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                bool result = guWhiteboard::SpeechOutput_t().get_from(m);
                SpeechOutput_function_t funct((void (SpeechOutput_WBFunctor_T::*)(guWhiteboard::WBTypes, bool &))WBFunctor<SpeechOutput_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SpeechOutput_WBFunctor_T >::fObject->*funct)(WBFunctor<SpeechOutput_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SpeechOutput_WBFunctor_T::*SpeechOutput_function_t) (guWhiteboard::WBTypes, bool &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SpeechOutput_WBFunctor_T *obj, void (SpeechOutput_WBFunctor_T::*f)(guWhiteboard::WBTypes, bool &), guWhiteboard::WBTypes t) { return new SpeechOutput_WBFunctor<SpeechOutput_WBFunctor_T >(obj, f, t); }
};



#ifdef FSMControlStatus_DEFINED
        
        /**
        * WBFunctor definition for FSM_Control_WBFunctor_T
        */
template <typename FSM_Control_WBFunctor_T >
class FSM_Control_WBFunctor: public WBFunctor<FSM_Control_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for FSM_Control_WBFunctor_T
        */
        FSM_Control_WBFunctor(FSM_Control_WBFunctor_T* obj, void (FSM_Control_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &), guWhiteboard::WBTypes t): WBFunctor<FSM_Control_WBFunctor_T >(obj, (void (FSM_Control_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class FSM_Control_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::FSMControlStatus result = guWhiteboard::FSM_Control_t().get_from(m);
                FSM_Control_function_t funct((void (FSM_Control_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &))WBFunctor<FSM_Control_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<FSM_Control_WBFunctor_T >::fObject->*funct)(WBFunctor<FSM_Control_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (FSM_Control_WBFunctor_T::*FSM_Control_function_t) (guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(FSM_Control_WBFunctor_T *obj, void (FSM_Control_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &), guWhiteboard::WBTypes t) { return new FSM_Control_WBFunctor<FSM_Control_WBFunctor_T >(obj, f, t); }
};

#endif //FSMControlStatus_DEFINED


#ifdef FSMControlStatus_DEFINED
        
        /**
        * WBFunctor definition for FSM_Status_WBFunctor_T
        */
template <typename FSM_Status_WBFunctor_T >
class FSM_Status_WBFunctor: public WBFunctor<FSM_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for FSM_Status_WBFunctor_T
        */
        FSM_Status_WBFunctor(FSM_Status_WBFunctor_T* obj, void (FSM_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &), guWhiteboard::WBTypes t): WBFunctor<FSM_Status_WBFunctor_T >(obj, (void (FSM_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class FSM_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::FSMControlStatus result = guWhiteboard::FSM_Status_t().get_from(m);
                FSM_Status_function_t funct((void (FSM_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &))WBFunctor<FSM_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<FSM_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<FSM_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (FSM_Status_WBFunctor_T::*FSM_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(FSM_Status_WBFunctor_T *obj, void (FSM_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::FSMControlStatus &), guWhiteboard::WBTypes t) { return new FSM_Status_WBFunctor<FSM_Status_WBFunctor_T >(obj, f, t); }
};

#endif //FSMControlStatus_DEFINED


#ifdef FSMNames_DEFINED
        
        /**
        * WBFunctor definition for FSM_Names_WBFunctor_T
        */
template <typename FSM_Names_WBFunctor_T >
class FSM_Names_WBFunctor: public WBFunctor<FSM_Names_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for FSM_Names_WBFunctor_T
        */
        FSM_Names_WBFunctor(FSM_Names_WBFunctor_T* obj, void (FSM_Names_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::FSMNames &), guWhiteboard::WBTypes t): WBFunctor<FSM_Names_WBFunctor_T >(obj, (void (FSM_Names_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class FSM_Names_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::FSMNames result = guWhiteboard::FSM_Names_t().get_from(m);
                FSM_Names_function_t funct((void (FSM_Names_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::FSMNames &))WBFunctor<FSM_Names_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<FSM_Names_WBFunctor_T >::fObject->*funct)(WBFunctor<FSM_Names_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (FSM_Names_WBFunctor_T::*FSM_Names_function_t) (guWhiteboard::WBTypes, guWhiteboard::FSMNames &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(FSM_Names_WBFunctor_T *obj, void (FSM_Names_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::FSMNames &), guWhiteboard::WBTypes t) { return new FSM_Names_WBFunctor<FSM_Names_WBFunctor_T >(obj, f, t); }
};

#endif //FSMNames_DEFINED


#ifdef FSMState_DEFINED
        
        /**
        * WBFunctor definition for FSM_States_WBFunctor_T
        */
template <typename FSM_States_WBFunctor_T >
class FSM_States_WBFunctor: public WBFunctor<FSM_States_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for FSM_States_WBFunctor_T
        */
        FSM_States_WBFunctor(FSM_States_WBFunctor_T* obj, void (FSM_States_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::FSMState &), guWhiteboard::WBTypes t): WBFunctor<FSM_States_WBFunctor_T >(obj, (void (FSM_States_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class FSM_States_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::FSMState result = guWhiteboard::FSM_States_t().get_from(m);
                FSM_States_function_t funct((void (FSM_States_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::FSMState &))WBFunctor<FSM_States_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<FSM_States_WBFunctor_T >::fObject->*funct)(WBFunctor<FSM_States_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (FSM_States_WBFunctor_T::*FSM_States_function_t) (guWhiteboard::WBTypes, guWhiteboard::FSMState &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(FSM_States_WBFunctor_T *obj, void (FSM_States_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::FSMState &), guWhiteboard::WBTypes t) { return new FSM_States_WBFunctor<FSM_States_WBFunctor_T >(obj, f, t); }
};

#endif //FSMState_DEFINED


#ifdef SENSORS_EPuckAccel_Control_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_EPuckAccel_Control_WBFunctor_T
        */
template <typename SENSORS_EPuckAccel_Control_WBFunctor_T >
class SENSORS_EPuckAccel_Control_WBFunctor: public WBFunctor<SENSORS_EPuckAccel_Control_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_EPuckAccel_Control_WBFunctor_T
        */
        SENSORS_EPuckAccel_Control_WBFunctor(SENSORS_EPuckAccel_Control_WBFunctor_T* obj, void (SENSORS_EPuckAccel_Control_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckAccel_Control &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_EPuckAccel_Control_WBFunctor_T >(obj, (void (SENSORS_EPuckAccel_Control_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_EPuckAccel_Control_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_EPuckAccel_Control result = guWhiteboard::SENSORS_EPuckAccel_Control_t().get_from(m);
                SENSORS_EPuckAccel_Control_function_t funct((void (SENSORS_EPuckAccel_Control_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckAccel_Control &))WBFunctor<SENSORS_EPuckAccel_Control_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_EPuckAccel_Control_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_EPuckAccel_Control_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_EPuckAccel_Control_WBFunctor_T::*SENSORS_EPuckAccel_Control_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckAccel_Control &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_EPuckAccel_Control_WBFunctor_T *obj, void (SENSORS_EPuckAccel_Control_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckAccel_Control &), guWhiteboard::WBTypes t) { return new SENSORS_EPuckAccel_Control_WBFunctor<SENSORS_EPuckAccel_Control_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_EPuckAccel_Control_DEFINED


#ifdef SENSORS_EPuckAccel_Status_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_EPuckAccel_Status_WBFunctor_T
        */
template <typename SENSORS_EPuckAccel_Status_WBFunctor_T >
class SENSORS_EPuckAccel_Status_WBFunctor: public WBFunctor<SENSORS_EPuckAccel_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_EPuckAccel_Status_WBFunctor_T
        */
        SENSORS_EPuckAccel_Status_WBFunctor(SENSORS_EPuckAccel_Status_WBFunctor_T* obj, void (SENSORS_EPuckAccel_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckAccel_Status &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_EPuckAccel_Status_WBFunctor_T >(obj, (void (SENSORS_EPuckAccel_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_EPuckAccel_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_EPuckAccel_Status result = guWhiteboard::SENSORS_EPuckAccel_Status_t().get_from(m);
                SENSORS_EPuckAccel_Status_function_t funct((void (SENSORS_EPuckAccel_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckAccel_Status &))WBFunctor<SENSORS_EPuckAccel_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_EPuckAccel_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_EPuckAccel_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_EPuckAccel_Status_WBFunctor_T::*SENSORS_EPuckAccel_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckAccel_Status &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_EPuckAccel_Status_WBFunctor_T *obj, void (SENSORS_EPuckAccel_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckAccel_Status &), guWhiteboard::WBTypes t) { return new SENSORS_EPuckAccel_Status_WBFunctor<SENSORS_EPuckAccel_Status_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_EPuckAccel_Status_DEFINED


#ifdef SENSORS_EPuckCamera_ControlStatus_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_EPuckCamera_Control_WBFunctor_T
        */
template <typename SENSORS_EPuckCamera_Control_WBFunctor_T >
class SENSORS_EPuckCamera_Control_WBFunctor: public WBFunctor<SENSORS_EPuckCamera_Control_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_EPuckCamera_Control_WBFunctor_T
        */
        SENSORS_EPuckCamera_Control_WBFunctor(SENSORS_EPuckCamera_Control_WBFunctor_T* obj, void (SENSORS_EPuckCamera_Control_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckCamera_ControlStatus &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_EPuckCamera_Control_WBFunctor_T >(obj, (void (SENSORS_EPuckCamera_Control_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_EPuckCamera_Control_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_EPuckCamera_ControlStatus result = guWhiteboard::SENSORS_EPuckCamera_Control_t().get_from(m);
                SENSORS_EPuckCamera_Control_function_t funct((void (SENSORS_EPuckCamera_Control_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckCamera_ControlStatus &))WBFunctor<SENSORS_EPuckCamera_Control_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_EPuckCamera_Control_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_EPuckCamera_Control_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_EPuckCamera_Control_WBFunctor_T::*SENSORS_EPuckCamera_Control_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckCamera_ControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_EPuckCamera_Control_WBFunctor_T *obj, void (SENSORS_EPuckCamera_Control_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckCamera_ControlStatus &), guWhiteboard::WBTypes t) { return new SENSORS_EPuckCamera_Control_WBFunctor<SENSORS_EPuckCamera_Control_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_EPuckCamera_ControlStatus_DEFINED


#ifdef SENSORS_EPuckCamera_ControlStatus_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_EPuckCamera_Status_WBFunctor_T
        */
template <typename SENSORS_EPuckCamera_Status_WBFunctor_T >
class SENSORS_EPuckCamera_Status_WBFunctor: public WBFunctor<SENSORS_EPuckCamera_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_EPuckCamera_Status_WBFunctor_T
        */
        SENSORS_EPuckCamera_Status_WBFunctor(SENSORS_EPuckCamera_Status_WBFunctor_T* obj, void (SENSORS_EPuckCamera_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckCamera_ControlStatus &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_EPuckCamera_Status_WBFunctor_T >(obj, (void (SENSORS_EPuckCamera_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_EPuckCamera_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_EPuckCamera_ControlStatus result = guWhiteboard::SENSORS_EPuckCamera_Status_t().get_from(m);
                SENSORS_EPuckCamera_Status_function_t funct((void (SENSORS_EPuckCamera_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckCamera_ControlStatus &))WBFunctor<SENSORS_EPuckCamera_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_EPuckCamera_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_EPuckCamera_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_EPuckCamera_Status_WBFunctor_T::*SENSORS_EPuckCamera_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckCamera_ControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_EPuckCamera_Status_WBFunctor_T *obj, void (SENSORS_EPuckCamera_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckCamera_ControlStatus &), guWhiteboard::WBTypes t) { return new SENSORS_EPuckCamera_Status_WBFunctor<SENSORS_EPuckCamera_Status_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_EPuckCamera_ControlStatus_DEFINED


#ifdef SENSORS_EPuckGSM_Control_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_EPuckGSM_Control_WBFunctor_T
        */
template <typename SENSORS_EPuckGSM_Control_WBFunctor_T >
class SENSORS_EPuckGSM_Control_WBFunctor: public WBFunctor<SENSORS_EPuckGSM_Control_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_EPuckGSM_Control_WBFunctor_T
        */
        SENSORS_EPuckGSM_Control_WBFunctor(SENSORS_EPuckGSM_Control_WBFunctor_T* obj, void (SENSORS_EPuckGSM_Control_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckGSM_Control &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_EPuckGSM_Control_WBFunctor_T >(obj, (void (SENSORS_EPuckGSM_Control_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_EPuckGSM_Control_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_EPuckGSM_Control result = guWhiteboard::SENSORS_EPuckGSM_Control_t().get_from(m);
                SENSORS_EPuckGSM_Control_function_t funct((void (SENSORS_EPuckGSM_Control_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckGSM_Control &))WBFunctor<SENSORS_EPuckGSM_Control_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_EPuckGSM_Control_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_EPuckGSM_Control_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_EPuckGSM_Control_WBFunctor_T::*SENSORS_EPuckGSM_Control_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckGSM_Control &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_EPuckGSM_Control_WBFunctor_T *obj, void (SENSORS_EPuckGSM_Control_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckGSM_Control &), guWhiteboard::WBTypes t) { return new SENSORS_EPuckGSM_Control_WBFunctor<SENSORS_EPuckGSM_Control_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_EPuckGSM_Control_DEFINED


#ifdef SENSORS_EPuckGSM_Status_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_EPuckGSM_Status_WBFunctor_T
        */
template <typename SENSORS_EPuckGSM_Status_WBFunctor_T >
class SENSORS_EPuckGSM_Status_WBFunctor: public WBFunctor<SENSORS_EPuckGSM_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_EPuckGSM_Status_WBFunctor_T
        */
        SENSORS_EPuckGSM_Status_WBFunctor(SENSORS_EPuckGSM_Status_WBFunctor_T* obj, void (SENSORS_EPuckGSM_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckGSM_Status &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_EPuckGSM_Status_WBFunctor_T >(obj, (void (SENSORS_EPuckGSM_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_EPuckGSM_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_EPuckGSM_Status result = guWhiteboard::SENSORS_EPuckGSM_Status_t().get_from(m);
                SENSORS_EPuckGSM_Status_function_t funct((void (SENSORS_EPuckGSM_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckGSM_Status &))WBFunctor<SENSORS_EPuckGSM_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_EPuckGSM_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_EPuckGSM_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_EPuckGSM_Status_WBFunctor_T::*SENSORS_EPuckGSM_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckGSM_Status &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_EPuckGSM_Status_WBFunctor_T *obj, void (SENSORS_EPuckGSM_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckGSM_Status &), guWhiteboard::WBTypes t) { return new SENSORS_EPuckGSM_Status_WBFunctor<SENSORS_EPuckGSM_Status_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_EPuckGSM_Status_DEFINED


#ifdef SENSORS_EPuckLight_Control_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_EPuckLight_Control_WBFunctor_T
        */
template <typename SENSORS_EPuckLight_Control_WBFunctor_T >
class SENSORS_EPuckLight_Control_WBFunctor: public WBFunctor<SENSORS_EPuckLight_Control_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_EPuckLight_Control_WBFunctor_T
        */
        SENSORS_EPuckLight_Control_WBFunctor(SENSORS_EPuckLight_Control_WBFunctor_T* obj, void (SENSORS_EPuckLight_Control_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckLight_Control &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_EPuckLight_Control_WBFunctor_T >(obj, (void (SENSORS_EPuckLight_Control_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_EPuckLight_Control_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_EPuckLight_Control result = guWhiteboard::SENSORS_EPuckLight_Control_t().get_from(m);
                SENSORS_EPuckLight_Control_function_t funct((void (SENSORS_EPuckLight_Control_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckLight_Control &))WBFunctor<SENSORS_EPuckLight_Control_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_EPuckLight_Control_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_EPuckLight_Control_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_EPuckLight_Control_WBFunctor_T::*SENSORS_EPuckLight_Control_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckLight_Control &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_EPuckLight_Control_WBFunctor_T *obj, void (SENSORS_EPuckLight_Control_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckLight_Control &), guWhiteboard::WBTypes t) { return new SENSORS_EPuckLight_Control_WBFunctor<SENSORS_EPuckLight_Control_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_EPuckLight_Control_DEFINED


#ifdef SENSORS_EPuckLight_Status_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_EPuckLight_Status_WBFunctor_T
        */
template <typename SENSORS_EPuckLight_Status_WBFunctor_T >
class SENSORS_EPuckLight_Status_WBFunctor: public WBFunctor<SENSORS_EPuckLight_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_EPuckLight_Status_WBFunctor_T
        */
        SENSORS_EPuckLight_Status_WBFunctor(SENSORS_EPuckLight_Status_WBFunctor_T* obj, void (SENSORS_EPuckLight_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckLight_Status &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_EPuckLight_Status_WBFunctor_T >(obj, (void (SENSORS_EPuckLight_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_EPuckLight_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_EPuckLight_Status result = guWhiteboard::SENSORS_EPuckLight_Status_t().get_from(m);
                SENSORS_EPuckLight_Status_function_t funct((void (SENSORS_EPuckLight_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckLight_Status &))WBFunctor<SENSORS_EPuckLight_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_EPuckLight_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_EPuckLight_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_EPuckLight_Status_WBFunctor_T::*SENSORS_EPuckLight_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckLight_Status &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_EPuckLight_Status_WBFunctor_T *obj, void (SENSORS_EPuckLight_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckLight_Status &), guWhiteboard::WBTypes t) { return new SENSORS_EPuckLight_Status_WBFunctor<SENSORS_EPuckLight_Status_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_EPuckLight_Status_DEFINED


#ifdef SENSORS_EPuckProximity_Control_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_EPuckProximity_Control_WBFunctor_T
        */
template <typename SENSORS_EPuckProximity_Control_WBFunctor_T >
class SENSORS_EPuckProximity_Control_WBFunctor: public WBFunctor<SENSORS_EPuckProximity_Control_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_EPuckProximity_Control_WBFunctor_T
        */
        SENSORS_EPuckProximity_Control_WBFunctor(SENSORS_EPuckProximity_Control_WBFunctor_T* obj, void (SENSORS_EPuckProximity_Control_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckProximity_Control &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_EPuckProximity_Control_WBFunctor_T >(obj, (void (SENSORS_EPuckProximity_Control_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_EPuckProximity_Control_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_EPuckProximity_Control result = guWhiteboard::SENSORS_EPuckProximity_Control_t().get_from(m);
                SENSORS_EPuckProximity_Control_function_t funct((void (SENSORS_EPuckProximity_Control_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckProximity_Control &))WBFunctor<SENSORS_EPuckProximity_Control_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_EPuckProximity_Control_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_EPuckProximity_Control_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_EPuckProximity_Control_WBFunctor_T::*SENSORS_EPuckProximity_Control_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckProximity_Control &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_EPuckProximity_Control_WBFunctor_T *obj, void (SENSORS_EPuckProximity_Control_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckProximity_Control &), guWhiteboard::WBTypes t) { return new SENSORS_EPuckProximity_Control_WBFunctor<SENSORS_EPuckProximity_Control_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_EPuckProximity_Control_DEFINED


#ifdef SENSORS_EPuckProximity_Status_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_EPuckProximity_Status_WBFunctor_T
        */
template <typename SENSORS_EPuckProximity_Status_WBFunctor_T >
class SENSORS_EPuckProximity_Status_WBFunctor: public WBFunctor<SENSORS_EPuckProximity_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_EPuckProximity_Status_WBFunctor_T
        */
        SENSORS_EPuckProximity_Status_WBFunctor(SENSORS_EPuckProximity_Status_WBFunctor_T* obj, void (SENSORS_EPuckProximity_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckProximity_Status &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_EPuckProximity_Status_WBFunctor_T >(obj, (void (SENSORS_EPuckProximity_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_EPuckProximity_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_EPuckProximity_Status result = guWhiteboard::SENSORS_EPuckProximity_Status_t().get_from(m);
                SENSORS_EPuckProximity_Status_function_t funct((void (SENSORS_EPuckProximity_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckProximity_Status &))WBFunctor<SENSORS_EPuckProximity_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_EPuckProximity_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_EPuckProximity_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_EPuckProximity_Status_WBFunctor_T::*SENSORS_EPuckProximity_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckProximity_Status &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_EPuckProximity_Status_WBFunctor_T *obj, void (SENSORS_EPuckProximity_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_EPuckProximity_Status &), guWhiteboard::WBTypes t) { return new SENSORS_EPuckProximity_Status_WBFunctor<SENSORS_EPuckProximity_Status_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_EPuckProximity_Status_DEFINED


#ifdef DifferentialRobotControlStatus_DEFINED
        
        /**
        * WBFunctor definition for DifferentialRobotControl_WBFunctor_T
        */
template <typename DifferentialRobotControl_WBFunctor_T >
class DifferentialRobotControl_WBFunctor: public WBFunctor<DifferentialRobotControl_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for DifferentialRobotControl_WBFunctor_T
        */
        DifferentialRobotControl_WBFunctor(DifferentialRobotControl_WBFunctor_T* obj, void (DifferentialRobotControl_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::DifferentialRobotControlStatus &), guWhiteboard::WBTypes t): WBFunctor<DifferentialRobotControl_WBFunctor_T >(obj, (void (DifferentialRobotControl_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class DifferentialRobotControl_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::DifferentialRobotControlStatus result = guWhiteboard::DifferentialRobotControl_t().get_from(m);
                DifferentialRobotControl_function_t funct((void (DifferentialRobotControl_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::DifferentialRobotControlStatus &))WBFunctor<DifferentialRobotControl_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<DifferentialRobotControl_WBFunctor_T >::fObject->*funct)(WBFunctor<DifferentialRobotControl_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (DifferentialRobotControl_WBFunctor_T::*DifferentialRobotControl_function_t) (guWhiteboard::WBTypes, guWhiteboard::DifferentialRobotControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(DifferentialRobotControl_WBFunctor_T *obj, void (DifferentialRobotControl_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::DifferentialRobotControlStatus &), guWhiteboard::WBTypes t) { return new DifferentialRobotControl_WBFunctor<DifferentialRobotControl_WBFunctor_T >(obj, f, t); }
};

#endif //DifferentialRobotControlStatus_DEFINED


#ifdef DifferentialRobotControlStatus_DEFINED
        
        /**
        * WBFunctor definition for DifferentialRobotStatus_WBFunctor_T
        */
template <typename DifferentialRobotStatus_WBFunctor_T >
class DifferentialRobotStatus_WBFunctor: public WBFunctor<DifferentialRobotStatus_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for DifferentialRobotStatus_WBFunctor_T
        */
        DifferentialRobotStatus_WBFunctor(DifferentialRobotStatus_WBFunctor_T* obj, void (DifferentialRobotStatus_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::DifferentialRobotControlStatus &), guWhiteboard::WBTypes t): WBFunctor<DifferentialRobotStatus_WBFunctor_T >(obj, (void (DifferentialRobotStatus_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class DifferentialRobotStatus_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::DifferentialRobotControlStatus result = guWhiteboard::DifferentialRobotStatus_t().get_from(m);
                DifferentialRobotStatus_function_t funct((void (DifferentialRobotStatus_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::DifferentialRobotControlStatus &))WBFunctor<DifferentialRobotStatus_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<DifferentialRobotStatus_WBFunctor_T >::fObject->*funct)(WBFunctor<DifferentialRobotStatus_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (DifferentialRobotStatus_WBFunctor_T::*DifferentialRobotStatus_function_t) (guWhiteboard::WBTypes, guWhiteboard::DifferentialRobotControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(DifferentialRobotStatus_WBFunctor_T *obj, void (DifferentialRobotStatus_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::DifferentialRobotControlStatus &), guWhiteboard::WBTypes t) { return new DifferentialRobotStatus_WBFunctor<DifferentialRobotStatus_WBFunctor_T >(obj, f, t); }
};

#endif //DifferentialRobotControlStatus_DEFINED


#ifdef EMITTERS_EPuckLED_ControlStatus_DEFINED
        
        /**
        * WBFunctor definition for EMITTERS_EPuckLED_Control_WBFunctor_T
        */
template <typename EMITTERS_EPuckLED_Control_WBFunctor_T >
class EMITTERS_EPuckLED_Control_WBFunctor: public WBFunctor<EMITTERS_EPuckLED_Control_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for EMITTERS_EPuckLED_Control_WBFunctor_T
        */
        EMITTERS_EPuckLED_Control_WBFunctor(EMITTERS_EPuckLED_Control_WBFunctor_T* obj, void (EMITTERS_EPuckLED_Control_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::EMITTERS_EPuckLED_ControlStatus &), guWhiteboard::WBTypes t): WBFunctor<EMITTERS_EPuckLED_Control_WBFunctor_T >(obj, (void (EMITTERS_EPuckLED_Control_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class EMITTERS_EPuckLED_Control_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::EMITTERS_EPuckLED_ControlStatus result = guWhiteboard::EMITTERS_EPuckLED_Control_t().get_from(m);
                EMITTERS_EPuckLED_Control_function_t funct((void (EMITTERS_EPuckLED_Control_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::EMITTERS_EPuckLED_ControlStatus &))WBFunctor<EMITTERS_EPuckLED_Control_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<EMITTERS_EPuckLED_Control_WBFunctor_T >::fObject->*funct)(WBFunctor<EMITTERS_EPuckLED_Control_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (EMITTERS_EPuckLED_Control_WBFunctor_T::*EMITTERS_EPuckLED_Control_function_t) (guWhiteboard::WBTypes, guWhiteboard::EMITTERS_EPuckLED_ControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(EMITTERS_EPuckLED_Control_WBFunctor_T *obj, void (EMITTERS_EPuckLED_Control_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::EMITTERS_EPuckLED_ControlStatus &), guWhiteboard::WBTypes t) { return new EMITTERS_EPuckLED_Control_WBFunctor<EMITTERS_EPuckLED_Control_WBFunctor_T >(obj, f, t); }
};

#endif //EMITTERS_EPuckLED_ControlStatus_DEFINED


#ifdef EMITTERS_EPuckLED_ControlStatus_DEFINED
        
        /**
        * WBFunctor definition for EMITTERS_EPuckLED_Status_WBFunctor_T
        */
template <typename EMITTERS_EPuckLED_Status_WBFunctor_T >
class EMITTERS_EPuckLED_Status_WBFunctor: public WBFunctor<EMITTERS_EPuckLED_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for EMITTERS_EPuckLED_Status_WBFunctor_T
        */
        EMITTERS_EPuckLED_Status_WBFunctor(EMITTERS_EPuckLED_Status_WBFunctor_T* obj, void (EMITTERS_EPuckLED_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::EMITTERS_EPuckLED_ControlStatus &), guWhiteboard::WBTypes t): WBFunctor<EMITTERS_EPuckLED_Status_WBFunctor_T >(obj, (void (EMITTERS_EPuckLED_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class EMITTERS_EPuckLED_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::EMITTERS_EPuckLED_ControlStatus result = guWhiteboard::EMITTERS_EPuckLED_Status_t().get_from(m);
                EMITTERS_EPuckLED_Status_function_t funct((void (EMITTERS_EPuckLED_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::EMITTERS_EPuckLED_ControlStatus &))WBFunctor<EMITTERS_EPuckLED_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<EMITTERS_EPuckLED_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<EMITTERS_EPuckLED_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (EMITTERS_EPuckLED_Status_WBFunctor_T::*EMITTERS_EPuckLED_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::EMITTERS_EPuckLED_ControlStatus &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(EMITTERS_EPuckLED_Status_WBFunctor_T *obj, void (EMITTERS_EPuckLED_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::EMITTERS_EPuckLED_ControlStatus &), guWhiteboard::WBTypes t) { return new EMITTERS_EPuckLED_Status_WBFunctor<EMITTERS_EPuckLED_Status_WBFunctor_T >(obj, f, t); }
};

#endif //EMITTERS_EPuckLED_ControlStatus_DEFINED


#ifdef GOAL_Control_DEFINED
        
        /**
        * WBFunctor definition for GOAL_Control_WBFunctor_T
        */
template <typename GOAL_Control_WBFunctor_T >
class GOAL_Control_WBFunctor: public WBFunctor<GOAL_Control_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for GOAL_Control_WBFunctor_T
        */
        GOAL_Control_WBFunctor(GOAL_Control_WBFunctor_T* obj, void (GOAL_Control_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::GOAL_Control &), guWhiteboard::WBTypes t): WBFunctor<GOAL_Control_WBFunctor_T >(obj, (void (GOAL_Control_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class GOAL_Control_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::GOAL_Control result = guWhiteboard::GOAL_Control_t().get_from(m);
                GOAL_Control_function_t funct((void (GOAL_Control_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::GOAL_Control &))WBFunctor<GOAL_Control_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<GOAL_Control_WBFunctor_T >::fObject->*funct)(WBFunctor<GOAL_Control_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (GOAL_Control_WBFunctor_T::*GOAL_Control_function_t) (guWhiteboard::WBTypes, guWhiteboard::GOAL_Control &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(GOAL_Control_WBFunctor_T *obj, void (GOAL_Control_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::GOAL_Control &), guWhiteboard::WBTypes t) { return new GOAL_Control_WBFunctor<GOAL_Control_WBFunctor_T >(obj, f, t); }
};

#endif //GOAL_Control_DEFINED


#ifdef GOAL_Status_DEFINED
        
        /**
        * WBFunctor definition for GOAL_Status_WBFunctor_T
        */
template <typename GOAL_Status_WBFunctor_T >
class GOAL_Status_WBFunctor: public WBFunctor<GOAL_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for GOAL_Status_WBFunctor_T
        */
        GOAL_Status_WBFunctor(GOAL_Status_WBFunctor_T* obj, void (GOAL_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::GOAL_Status &), guWhiteboard::WBTypes t): WBFunctor<GOAL_Status_WBFunctor_T >(obj, (void (GOAL_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class GOAL_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::GOAL_Status result = guWhiteboard::GOAL_Status_t().get_from(m);
                GOAL_Status_function_t funct((void (GOAL_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::GOAL_Status &))WBFunctor<GOAL_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<GOAL_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<GOAL_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (GOAL_Status_WBFunctor_T::*GOAL_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::GOAL_Status &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(GOAL_Status_WBFunctor_T *obj, void (GOAL_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::GOAL_Status &), guWhiteboard::WBTypes t) { return new GOAL_Status_WBFunctor<GOAL_Status_WBFunctor_T >(obj, f, t); }
};

#endif //GOAL_Status_DEFINED


#ifdef SENSORS_Intersection_Status_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_Intersection_Status_WBFunctor_T
        */
template <typename SENSORS_Intersection_Status_WBFunctor_T >
class SENSORS_Intersection_Status_WBFunctor: public WBFunctor<SENSORS_Intersection_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_Intersection_Status_WBFunctor_T
        */
        SENSORS_Intersection_Status_WBFunctor(SENSORS_Intersection_Status_WBFunctor_T* obj, void (SENSORS_Intersection_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_Intersection_Status &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_Intersection_Status_WBFunctor_T >(obj, (void (SENSORS_Intersection_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_Intersection_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_Intersection_Status result = guWhiteboard::SENSORS_Intersection_Status_t().get_from(m);
                SENSORS_Intersection_Status_function_t funct((void (SENSORS_Intersection_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_Intersection_Status &))WBFunctor<SENSORS_Intersection_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_Intersection_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_Intersection_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_Intersection_Status_WBFunctor_T::*SENSORS_Intersection_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_Intersection_Status &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_Intersection_Status_WBFunctor_T *obj, void (SENSORS_Intersection_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_Intersection_Status &), guWhiteboard::WBTypes t) { return new SENSORS_Intersection_Status_WBFunctor<SENSORS_Intersection_Status_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_Intersection_Status_DEFINED


#ifdef Direction_Control_DEFINED
        
        /**
        * WBFunctor definition for Direction_Control_WBFunctor_T
        */
template <typename Direction_Control_WBFunctor_T >
class Direction_Control_WBFunctor: public WBFunctor<Direction_Control_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Direction_Control_WBFunctor_T
        */
        Direction_Control_WBFunctor(Direction_Control_WBFunctor_T* obj, void (Direction_Control_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Direction_Control &), guWhiteboard::WBTypes t): WBFunctor<Direction_Control_WBFunctor_T >(obj, (void (Direction_Control_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Direction_Control_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Direction_Control result = guWhiteboard::Direction_Control_t().get_from(m);
                Direction_Control_function_t funct((void (Direction_Control_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Direction_Control &))WBFunctor<Direction_Control_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Direction_Control_WBFunctor_T >::fObject->*funct)(WBFunctor<Direction_Control_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Direction_Control_WBFunctor_T::*Direction_Control_function_t) (guWhiteboard::WBTypes, guWhiteboard::Direction_Control &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Direction_Control_WBFunctor_T *obj, void (Direction_Control_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Direction_Control &), guWhiteboard::WBTypes t) { return new Direction_Control_WBFunctor<Direction_Control_WBFunctor_T >(obj, f, t); }
};

#endif //Direction_Control_DEFINED


#ifdef SENSORS_Obstacle_On_Path_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_Obstacle_On_Path_WBFunctor_T
        */
template <typename SENSORS_Obstacle_On_Path_WBFunctor_T >
class SENSORS_Obstacle_On_Path_WBFunctor: public WBFunctor<SENSORS_Obstacle_On_Path_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_Obstacle_On_Path_WBFunctor_T
        */
        SENSORS_Obstacle_On_Path_WBFunctor(SENSORS_Obstacle_On_Path_WBFunctor_T* obj, void (SENSORS_Obstacle_On_Path_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_Obstacle_On_Path &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_Obstacle_On_Path_WBFunctor_T >(obj, (void (SENSORS_Obstacle_On_Path_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_Obstacle_On_Path_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_Obstacle_On_Path result = guWhiteboard::SENSORS_Obstacle_On_Path_t().get_from(m);
                SENSORS_Obstacle_On_Path_function_t funct((void (SENSORS_Obstacle_On_Path_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_Obstacle_On_Path &))WBFunctor<SENSORS_Obstacle_On_Path_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_Obstacle_On_Path_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_Obstacle_On_Path_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_Obstacle_On_Path_WBFunctor_T::*SENSORS_Obstacle_On_Path_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_Obstacle_On_Path &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_Obstacle_On_Path_WBFunctor_T *obj, void (SENSORS_Obstacle_On_Path_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_Obstacle_On_Path &), guWhiteboard::WBTypes t) { return new SENSORS_Obstacle_On_Path_WBFunctor<SENSORS_Obstacle_On_Path_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_Obstacle_On_Path_DEFINED


#ifdef Angle_DEFINED
        
        /**
        * WBFunctor definition for Angle_WBFunctor_T
        */
template <typename Angle_WBFunctor_T >
class Angle_WBFunctor: public WBFunctor<Angle_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Angle_WBFunctor_T
        */
        Angle_WBFunctor(Angle_WBFunctor_T* obj, void (Angle_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Angle &), guWhiteboard::WBTypes t): WBFunctor<Angle_WBFunctor_T >(obj, (void (Angle_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Angle_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Angle result = guWhiteboard::Angle_t().get_from(m);
                Angle_function_t funct((void (Angle_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Angle &))WBFunctor<Angle_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Angle_WBFunctor_T >::fObject->*funct)(WBFunctor<Angle_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Angle_WBFunctor_T::*Angle_function_t) (guWhiteboard::WBTypes, guWhiteboard::Angle &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Angle_WBFunctor_T *obj, void (Angle_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Angle &), guWhiteboard::WBTypes t) { return new Angle_WBFunctor<Angle_WBFunctor_T >(obj, f, t); }
};

#endif //Angle_DEFINED


#ifdef SENSORS_Obstacle_DEFINED
        
        /**
        * WBFunctor definition for SENSORS_Obstacle_WBFunctor_T
        */
template <typename SENSORS_Obstacle_WBFunctor_T >
class SENSORS_Obstacle_WBFunctor: public WBFunctor<SENSORS_Obstacle_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for SENSORS_Obstacle_WBFunctor_T
        */
        SENSORS_Obstacle_WBFunctor(SENSORS_Obstacle_WBFunctor_T* obj, void (SENSORS_Obstacle_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_Obstacle &), guWhiteboard::WBTypes t): WBFunctor<SENSORS_Obstacle_WBFunctor_T >(obj, (void (SENSORS_Obstacle_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class SENSORS_Obstacle_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::SENSORS_Obstacle result = guWhiteboard::SENSORS_Obstacle_t().get_from(m);
                SENSORS_Obstacle_function_t funct((void (SENSORS_Obstacle_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_Obstacle &))WBFunctor<SENSORS_Obstacle_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<SENSORS_Obstacle_WBFunctor_T >::fObject->*funct)(WBFunctor<SENSORS_Obstacle_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (SENSORS_Obstacle_WBFunctor_T::*SENSORS_Obstacle_function_t) (guWhiteboard::WBTypes, guWhiteboard::SENSORS_Obstacle &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(SENSORS_Obstacle_WBFunctor_T *obj, void (SENSORS_Obstacle_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::SENSORS_Obstacle &), guWhiteboard::WBTypes t) { return new SENSORS_Obstacle_WBFunctor<SENSORS_Obstacle_WBFunctor_T >(obj, f, t); }
};

#endif //SENSORS_Obstacle_DEFINED


#ifdef Current_Position_DEFINED
        
        /**
        * WBFunctor definition for Current_Position_WBFunctor_T
        */
template <typename Current_Position_WBFunctor_T >
class Current_Position_WBFunctor: public WBFunctor<Current_Position_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Current_Position_WBFunctor_T
        */
        Current_Position_WBFunctor(Current_Position_WBFunctor_T* obj, void (Current_Position_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Current_Position &), guWhiteboard::WBTypes t): WBFunctor<Current_Position_WBFunctor_T >(obj, (void (Current_Position_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Current_Position_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Current_Position result = guWhiteboard::Current_Position_t().get_from(m);
                Current_Position_function_t funct((void (Current_Position_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Current_Position &))WBFunctor<Current_Position_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Current_Position_WBFunctor_T >::fObject->*funct)(WBFunctor<Current_Position_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Current_Position_WBFunctor_T::*Current_Position_function_t) (guWhiteboard::WBTypes, guWhiteboard::Current_Position &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Current_Position_WBFunctor_T *obj, void (Current_Position_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Current_Position &), guWhiteboard::WBTypes t) { return new Current_Position_WBFunctor<Current_Position_WBFunctor_T >(obj, f, t); }
};

#endif //Current_Position_DEFINED


#ifdef Plan_Planner_Settings_DEFINED
        
        /**
        * WBFunctor definition for Plan_Planner_Settings_WBFunctor_T
        */
template <typename Plan_Planner_Settings_WBFunctor_T >
class Plan_Planner_Settings_WBFunctor: public WBFunctor<Plan_Planner_Settings_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Plan_Planner_Settings_WBFunctor_T
        */
        Plan_Planner_Settings_WBFunctor(Plan_Planner_Settings_WBFunctor_T* obj, void (Plan_Planner_Settings_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Plan_Planner_Settings &), guWhiteboard::WBTypes t): WBFunctor<Plan_Planner_Settings_WBFunctor_T >(obj, (void (Plan_Planner_Settings_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Plan_Planner_Settings_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Plan_Planner_Settings result = guWhiteboard::Plan_Planner_Settings_t().get_from(m);
                Plan_Planner_Settings_function_t funct((void (Plan_Planner_Settings_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Plan_Planner_Settings &))WBFunctor<Plan_Planner_Settings_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Plan_Planner_Settings_WBFunctor_T >::fObject->*funct)(WBFunctor<Plan_Planner_Settings_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Plan_Planner_Settings_WBFunctor_T::*Plan_Planner_Settings_function_t) (guWhiteboard::WBTypes, guWhiteboard::Plan_Planner_Settings &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Plan_Planner_Settings_WBFunctor_T *obj, void (Plan_Planner_Settings_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Plan_Planner_Settings &), guWhiteboard::WBTypes t) { return new Plan_Planner_Settings_WBFunctor<Plan_Planner_Settings_WBFunctor_T >(obj, f, t); }
};

#endif //Plan_Planner_Settings_DEFINED


#ifdef Plan_Filename_DEFINED
        
        /**
        * WBFunctor definition for Plan_Domain_Filename_WBFunctor_T
        */
template <typename Plan_Domain_Filename_WBFunctor_T >
class Plan_Domain_Filename_WBFunctor: public WBFunctor<Plan_Domain_Filename_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Plan_Domain_Filename_WBFunctor_T
        */
        Plan_Domain_Filename_WBFunctor(Plan_Domain_Filename_WBFunctor_T* obj, void (Plan_Domain_Filename_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Plan_Filename &), guWhiteboard::WBTypes t): WBFunctor<Plan_Domain_Filename_WBFunctor_T >(obj, (void (Plan_Domain_Filename_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Plan_Domain_Filename_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Plan_Filename result = guWhiteboard::Plan_Domain_Filename_t().get_from(m);
                Plan_Domain_Filename_function_t funct((void (Plan_Domain_Filename_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Plan_Filename &))WBFunctor<Plan_Domain_Filename_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Plan_Domain_Filename_WBFunctor_T >::fObject->*funct)(WBFunctor<Plan_Domain_Filename_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Plan_Domain_Filename_WBFunctor_T::*Plan_Domain_Filename_function_t) (guWhiteboard::WBTypes, guWhiteboard::Plan_Filename &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Plan_Domain_Filename_WBFunctor_T *obj, void (Plan_Domain_Filename_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Plan_Filename &), guWhiteboard::WBTypes t) { return new Plan_Domain_Filename_WBFunctor<Plan_Domain_Filename_WBFunctor_T >(obj, f, t); }
};

#endif //Plan_Filename_DEFINED


#ifdef Plan_Filename_DEFINED
        
        /**
        * WBFunctor definition for Plan_Problem_Filename_WBFunctor_T
        */
template <typename Plan_Problem_Filename_WBFunctor_T >
class Plan_Problem_Filename_WBFunctor: public WBFunctor<Plan_Problem_Filename_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Plan_Problem_Filename_WBFunctor_T
        */
        Plan_Problem_Filename_WBFunctor(Plan_Problem_Filename_WBFunctor_T* obj, void (Plan_Problem_Filename_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Plan_Filename &), guWhiteboard::WBTypes t): WBFunctor<Plan_Problem_Filename_WBFunctor_T >(obj, (void (Plan_Problem_Filename_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Plan_Problem_Filename_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Plan_Filename result = guWhiteboard::Plan_Problem_Filename_t().get_from(m);
                Plan_Problem_Filename_function_t funct((void (Plan_Problem_Filename_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Plan_Filename &))WBFunctor<Plan_Problem_Filename_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Plan_Problem_Filename_WBFunctor_T >::fObject->*funct)(WBFunctor<Plan_Problem_Filename_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Plan_Problem_Filename_WBFunctor_T::*Plan_Problem_Filename_function_t) (guWhiteboard::WBTypes, guWhiteboard::Plan_Filename &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Plan_Problem_Filename_WBFunctor_T *obj, void (Plan_Problem_Filename_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Plan_Filename &), guWhiteboard::WBTypes t) { return new Plan_Problem_Filename_WBFunctor<Plan_Problem_Filename_WBFunctor_T >(obj, f, t); }
};

#endif //Plan_Filename_DEFINED


#ifdef Plan_Filename_DEFINED
        
        /**
        * WBFunctor definition for Plan_Obstacles_Filename_WBFunctor_T
        */
template <typename Plan_Obstacles_Filename_WBFunctor_T >
class Plan_Obstacles_Filename_WBFunctor: public WBFunctor<Plan_Obstacles_Filename_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Plan_Obstacles_Filename_WBFunctor_T
        */
        Plan_Obstacles_Filename_WBFunctor(Plan_Obstacles_Filename_WBFunctor_T* obj, void (Plan_Obstacles_Filename_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Plan_Filename &), guWhiteboard::WBTypes t): WBFunctor<Plan_Obstacles_Filename_WBFunctor_T >(obj, (void (Plan_Obstacles_Filename_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Plan_Obstacles_Filename_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Plan_Filename result = guWhiteboard::Plan_Obstacles_Filename_t().get_from(m);
                Plan_Obstacles_Filename_function_t funct((void (Plan_Obstacles_Filename_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Plan_Filename &))WBFunctor<Plan_Obstacles_Filename_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Plan_Obstacles_Filename_WBFunctor_T >::fObject->*funct)(WBFunctor<Plan_Obstacles_Filename_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Plan_Obstacles_Filename_WBFunctor_T::*Plan_Obstacles_Filename_function_t) (guWhiteboard::WBTypes, guWhiteboard::Plan_Filename &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Plan_Obstacles_Filename_WBFunctor_T *obj, void (Plan_Obstacles_Filename_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Plan_Filename &), guWhiteboard::WBTypes t) { return new Plan_Obstacles_Filename_WBFunctor<Plan_Obstacles_Filename_WBFunctor_T >(obj, f, t); }
};

#endif //Plan_Filename_DEFINED


#ifdef Plan_Filename_DEFINED
        
        /**
        * WBFunctor definition for Plan_Plan_Filename_WBFunctor_T
        */
template <typename Plan_Plan_Filename_WBFunctor_T >
class Plan_Plan_Filename_WBFunctor: public WBFunctor<Plan_Plan_Filename_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Plan_Plan_Filename_WBFunctor_T
        */
        Plan_Plan_Filename_WBFunctor(Plan_Plan_Filename_WBFunctor_T* obj, void (Plan_Plan_Filename_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Plan_Filename &), guWhiteboard::WBTypes t): WBFunctor<Plan_Plan_Filename_WBFunctor_T >(obj, (void (Plan_Plan_Filename_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Plan_Plan_Filename_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Plan_Filename result = guWhiteboard::Plan_Plan_Filename_t().get_from(m);
                Plan_Plan_Filename_function_t funct((void (Plan_Plan_Filename_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Plan_Filename &))WBFunctor<Plan_Plan_Filename_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Plan_Plan_Filename_WBFunctor_T >::fObject->*funct)(WBFunctor<Plan_Plan_Filename_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Plan_Plan_Filename_WBFunctor_T::*Plan_Plan_Filename_function_t) (guWhiteboard::WBTypes, guWhiteboard::Plan_Filename &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Plan_Plan_Filename_WBFunctor_T *obj, void (Plan_Plan_Filename_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Plan_Filename &), guWhiteboard::WBTypes t) { return new Plan_Plan_Filename_WBFunctor<Plan_Plan_Filename_WBFunctor_T >(obj, f, t); }
};

#endif //Plan_Filename_DEFINED


#ifdef Plan_Control_Status_DEFINED
        
        /**
        * WBFunctor definition for Plan_Manager_Status_WBFunctor_T
        */
template <typename Plan_Manager_Status_WBFunctor_T >
class Plan_Manager_Status_WBFunctor: public WBFunctor<Plan_Manager_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Plan_Manager_Status_WBFunctor_T
        */
        Plan_Manager_Status_WBFunctor(Plan_Manager_Status_WBFunctor_T* obj, void (Plan_Manager_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Plan_Control_Status &), guWhiteboard::WBTypes t): WBFunctor<Plan_Manager_Status_WBFunctor_T >(obj, (void (Plan_Manager_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Plan_Manager_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Plan_Control_Status result = guWhiteboard::Plan_Manager_Status_t().get_from(m);
                Plan_Manager_Status_function_t funct((void (Plan_Manager_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Plan_Control_Status &))WBFunctor<Plan_Manager_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Plan_Manager_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<Plan_Manager_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Plan_Manager_Status_WBFunctor_T::*Plan_Manager_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::Plan_Control_Status &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Plan_Manager_Status_WBFunctor_T *obj, void (Plan_Manager_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Plan_Control_Status &), guWhiteboard::WBTypes t) { return new Plan_Manager_Status_WBFunctor<Plan_Manager_Status_WBFunctor_T >(obj, f, t); }
};

#endif //Plan_Control_Status_DEFINED


#ifdef Plan_Control_Status_DEFINED
        
        /**
        * WBFunctor definition for Plan_Planner_Status_WBFunctor_T
        */
template <typename Plan_Planner_Status_WBFunctor_T >
class Plan_Planner_Status_WBFunctor: public WBFunctor<Plan_Planner_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Plan_Planner_Status_WBFunctor_T
        */
        Plan_Planner_Status_WBFunctor(Plan_Planner_Status_WBFunctor_T* obj, void (Plan_Planner_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Plan_Control_Status &), guWhiteboard::WBTypes t): WBFunctor<Plan_Planner_Status_WBFunctor_T >(obj, (void (Plan_Planner_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Plan_Planner_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Plan_Control_Status result = guWhiteboard::Plan_Planner_Status_t().get_from(m);
                Plan_Planner_Status_function_t funct((void (Plan_Planner_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Plan_Control_Status &))WBFunctor<Plan_Planner_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Plan_Planner_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<Plan_Planner_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Plan_Planner_Status_WBFunctor_T::*Plan_Planner_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::Plan_Control_Status &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Plan_Planner_Status_WBFunctor_T *obj, void (Plan_Planner_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Plan_Control_Status &), guWhiteboard::WBTypes t) { return new Plan_Planner_Status_WBFunctor<Plan_Planner_Status_WBFunctor_T >(obj, f, t); }
};

#endif //Plan_Control_Status_DEFINED


#ifdef Plan_Goal_List_DEFINED
        
        /**
        * WBFunctor definition for Plan_Goal_List_WBFunctor_T
        */
template <typename Plan_Goal_List_WBFunctor_T >
class Plan_Goal_List_WBFunctor: public WBFunctor<Plan_Goal_List_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Plan_Goal_List_WBFunctor_T
        */
        Plan_Goal_List_WBFunctor(Plan_Goal_List_WBFunctor_T* obj, void (Plan_Goal_List_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Plan_Goal_List &), guWhiteboard::WBTypes t): WBFunctor<Plan_Goal_List_WBFunctor_T >(obj, (void (Plan_Goal_List_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Plan_Goal_List_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Plan_Goal_List result = guWhiteboard::Plan_Goal_List_t().get_from(m);
                Plan_Goal_List_function_t funct((void (Plan_Goal_List_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Plan_Goal_List &))WBFunctor<Plan_Goal_List_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Plan_Goal_List_WBFunctor_T >::fObject->*funct)(WBFunctor<Plan_Goal_List_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Plan_Goal_List_WBFunctor_T::*Plan_Goal_List_function_t) (guWhiteboard::WBTypes, guWhiteboard::Plan_Goal_List &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Plan_Goal_List_WBFunctor_T *obj, void (Plan_Goal_List_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Plan_Goal_List &), guWhiteboard::WBTypes t) { return new Plan_Goal_List_WBFunctor<Plan_Goal_List_WBFunctor_T >(obj, f, t); }
};

#endif //Plan_Goal_List_DEFINED


#ifdef Plan_Obstacle_List_DEFINED
        
        /**
        * WBFunctor definition for Plan_Obstacle_List_WBFunctor_T
        */
template <typename Plan_Obstacle_List_WBFunctor_T >
class Plan_Obstacle_List_WBFunctor: public WBFunctor<Plan_Obstacle_List_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Plan_Obstacle_List_WBFunctor_T
        */
        Plan_Obstacle_List_WBFunctor(Plan_Obstacle_List_WBFunctor_T* obj, void (Plan_Obstacle_List_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Plan_Obstacle_List &), guWhiteboard::WBTypes t): WBFunctor<Plan_Obstacle_List_WBFunctor_T >(obj, (void (Plan_Obstacle_List_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Plan_Obstacle_List_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Plan_Obstacle_List result = guWhiteboard::Plan_Obstacle_List_t().get_from(m);
                Plan_Obstacle_List_function_t funct((void (Plan_Obstacle_List_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Plan_Obstacle_List &))WBFunctor<Plan_Obstacle_List_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Plan_Obstacle_List_WBFunctor_T >::fObject->*funct)(WBFunctor<Plan_Obstacle_List_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Plan_Obstacle_List_WBFunctor_T::*Plan_Obstacle_List_function_t) (guWhiteboard::WBTypes, guWhiteboard::Plan_Obstacle_List &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Plan_Obstacle_List_WBFunctor_T *obj, void (Plan_Obstacle_List_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Plan_Obstacle_List &), guWhiteboard::WBTypes t) { return new Plan_Obstacle_List_WBFunctor<Plan_Obstacle_List_WBFunctor_T >(obj, f, t); }
};

#endif //Plan_Obstacle_List_DEFINED


#ifdef Epuck_Test_DEFINED
        
        /**
        * WBFunctor definition for Epuck_Test_Control_WBFunctor_T
        */
template <typename Epuck_Test_Control_WBFunctor_T >
class Epuck_Test_Control_WBFunctor: public WBFunctor<Epuck_Test_Control_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Epuck_Test_Control_WBFunctor_T
        */
        Epuck_Test_Control_WBFunctor(Epuck_Test_Control_WBFunctor_T* obj, void (Epuck_Test_Control_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Epuck_Test &), guWhiteboard::WBTypes t): WBFunctor<Epuck_Test_Control_WBFunctor_T >(obj, (void (Epuck_Test_Control_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Epuck_Test_Control_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Epuck_Test result = guWhiteboard::Epuck_Test_Control_t().get_from(m);
                Epuck_Test_Control_function_t funct((void (Epuck_Test_Control_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Epuck_Test &))WBFunctor<Epuck_Test_Control_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Epuck_Test_Control_WBFunctor_T >::fObject->*funct)(WBFunctor<Epuck_Test_Control_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Epuck_Test_Control_WBFunctor_T::*Epuck_Test_Control_function_t) (guWhiteboard::WBTypes, guWhiteboard::Epuck_Test &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Epuck_Test_Control_WBFunctor_T *obj, void (Epuck_Test_Control_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Epuck_Test &), guWhiteboard::WBTypes t) { return new Epuck_Test_Control_WBFunctor<Epuck_Test_Control_WBFunctor_T >(obj, f, t); }
};

#endif //Epuck_Test_DEFINED


#ifdef Epuck_Test_DEFINED
        
        /**
        * WBFunctor definition for Epuck_Test_Status_WBFunctor_T
        */
template <typename Epuck_Test_Status_WBFunctor_T >
class Epuck_Test_Status_WBFunctor: public WBFunctor<Epuck_Test_Status_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Epuck_Test_Status_WBFunctor_T
        */
        Epuck_Test_Status_WBFunctor(Epuck_Test_Status_WBFunctor_T* obj, void (Epuck_Test_Status_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Epuck_Test &), guWhiteboard::WBTypes t): WBFunctor<Epuck_Test_Status_WBFunctor_T >(obj, (void (Epuck_Test_Status_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Epuck_Test_Status_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Epuck_Test result = guWhiteboard::Epuck_Test_Status_t().get_from(m);
                Epuck_Test_Status_function_t funct((void (Epuck_Test_Status_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Epuck_Test &))WBFunctor<Epuck_Test_Status_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Epuck_Test_Status_WBFunctor_T >::fObject->*funct)(WBFunctor<Epuck_Test_Status_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Epuck_Test_Status_WBFunctor_T::*Epuck_Test_Status_function_t) (guWhiteboard::WBTypes, guWhiteboard::Epuck_Test &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Epuck_Test_Status_WBFunctor_T *obj, void (Epuck_Test_Status_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Epuck_Test &), guWhiteboard::WBTypes t) { return new Epuck_Test_Status_WBFunctor<Epuck_Test_Status_WBFunctor_T >(obj, f, t); }
};

#endif //Epuck_Test_DEFINED


#ifdef Epuck_Test_DEFINED
        
        /**
        * WBFunctor definition for Epuck_Test_Start_Up_WBFunctor_T
        */
template <typename Epuck_Test_Start_Up_WBFunctor_T >
class Epuck_Test_Start_Up_WBFunctor: public WBFunctor<Epuck_Test_Start_Up_WBFunctor_T > 
{
public:
        
        /**
        * WBFunctor constructor for Epuck_Test_Start_Up_WBFunctor_T
        */
        Epuck_Test_Start_Up_WBFunctor(Epuck_Test_Start_Up_WBFunctor_T* obj, void (Epuck_Test_Start_Up_WBFunctor_T::*pFunc) (guWhiteboard::WBTypes, guWhiteboard::Epuck_Test &), guWhiteboard::WBTypes t): WBFunctor<Epuck_Test_Start_Up_WBFunctor_T >(obj, (void (Epuck_Test_Start_Up_WBFunctor_T::*) (guWhiteboard::WBTypes, gu_simple_message*))pFunc, t) { }

        
        /**
        * call method for callbacks, for class Epuck_Test_Start_Up_WBFunctor_T
        */
        void call(gu_simple_message *m)
        {
                guWhiteboard::Epuck_Test result = guWhiteboard::Epuck_Test_Start_Up_t().get_from(m);
                Epuck_Test_Start_Up_function_t funct((void (Epuck_Test_Start_Up_WBFunctor_T::*)(guWhiteboard::WBTypes, guWhiteboard::Epuck_Test &))WBFunctor<Epuck_Test_Start_Up_WBFunctor_T >::get_s_func_ptr());
                (WBFunctor<Epuck_Test_Start_Up_WBFunctor_T >::fObject->*funct)(WBFunctor<Epuck_Test_Start_Up_WBFunctor_T >::type_enum, result);
        }
        
        /**
        * define callback signature
        */
        typedef void (Epuck_Test_Start_Up_WBFunctor_T::*Epuck_Test_Start_Up_function_t) (guWhiteboard::WBTypes, guWhiteboard::Epuck_Test &);

        
        /**
        * internal method of linking classes 
        */
        static WBFunctorBase *bind(Epuck_Test_Start_Up_WBFunctor_T *obj, void (Epuck_Test_Start_Up_WBFunctor_T::*f)(guWhiteboard::WBTypes, guWhiteboard::Epuck_Test &), guWhiteboard::WBTypes t) { return new Epuck_Test_Start_Up_WBFunctor<Epuck_Test_Start_Up_WBFunctor_T >(obj, f, t); }
};

#endif //Epuck_Test_DEFINED


